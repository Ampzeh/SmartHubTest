// <auto-generated />
using System;
using API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240729184137_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.LookupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Lookup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33e8cd0c-c091-450b-8d99-0d91382a67de"),
                            IsDeleted = false,
                            SortOrder = 0,
                            TypeId = new Guid("073a7529-6b8c-40b3-8b2f-117b50eb82be"),
                            Value = "Normal"
                        },
                        new
                        {
                            Id = new Guid("5ed75422-300d-4a15-8487-a48c1becd664"),
                            IsDeleted = false,
                            SortOrder = 1,
                            TypeId = new Guid("073a7529-6b8c-40b3-8b2f-117b50eb82be"),
                            Value = "Staff"
                        },
                        new
                        {
                            Id = new Guid("3c1c4c3f-cb7d-479b-9084-abaa1b34208a"),
                            IsDeleted = false,
                            SortOrder = 2,
                            TypeId = new Guid("073a7529-6b8c-40b3-8b2f-117b50eb82be"),
                            Value = "Mechanical"
                        },
                        new
                        {
                            Id = new Guid("384fd858-8eed-42b3-bdd1-15d9639e088a"),
                            IsDeleted = false,
                            SortOrder = 3,
                            TypeId = new Guid("073a7529-6b8c-40b3-8b2f-117b50eb82be"),
                            Value = "Perishable"
                        },
                        new
                        {
                            Id = new Guid("99f5bce5-40d4-41f2-939c-02d66d2d0cfb"),
                            IsDeleted = false,
                            SortOrder = 0,
                            TypeId = new Guid("baaf686b-0b87-4846-a774-510b2fde7c46"),
                            Value = "New"
                        },
                        new
                        {
                            Id = new Guid("c2a8f3d8-bec7-43b8-a8b2-4c25580c3a0c"),
                            IsDeleted = false,
                            SortOrder = 1,
                            TypeId = new Guid("baaf686b-0b87-4846-a774-510b2fde7c46"),
                            Value = "Processing"
                        },
                        new
                        {
                            Id = new Guid("e7cd4913-f470-4071-8f06-cdd877063b28"),
                            IsDeleted = false,
                            SortOrder = 2,
                            TypeId = new Guid("baaf686b-0b87-4846-a774-510b2fde7c46"),
                            Value = "Complete"
                        },
                        new
                        {
                            Id = new Guid("b91879c8-43be-4ba4-91e8-48088692c812"),
                            IsDeleted = false,
                            SortOrder = 0,
                            TypeId = new Guid("fb991718-8ca8-4b93-a11f-8153980cf49d"),
                            Value = "Apparel"
                        },
                        new
                        {
                            Id = new Guid("b37513f7-dba4-4d76-84c3-bdaff996f0b7"),
                            IsDeleted = false,
                            SortOrder = 1,
                            TypeId = new Guid("fb991718-8ca8-4b93-a11f-8153980cf49d"),
                            Value = "Parts"
                        },
                        new
                        {
                            Id = new Guid("6f335a6b-6fef-481a-8fb8-4f85a02685a8"),
                            IsDeleted = false,
                            SortOrder = 2,
                            TypeId = new Guid("fb991718-8ca8-4b93-a11f-8153980cf49d"),
                            Value = "Equipment"
                        },
                        new
                        {
                            Id = new Guid("6b24cbd1-f3ff-4a65-a457-9d09198b2c14"),
                            IsDeleted = false,
                            SortOrder = 3,
                            TypeId = new Guid("fb991718-8ca8-4b93-a11f-8153980cf49d"),
                            Value = "Motor"
                        });
                });

            modelBuilder.Entity("API.Models.LookupTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LookupType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("073a7529-6b8c-40b3-8b2f-117b50eb82be"),
                            IsDeleted = false,
                            Name = "OrderType"
                        },
                        new
                        {
                            Id = new Guid("baaf686b-0b87-4846-a774-510b2fde7c46"),
                            IsDeleted = false,
                            Name = "OrderStatus"
                        },
                        new
                        {
                            Id = new Guid("fb991718-8ca8-4b93-a11f-8153980cf49d"),
                            IsDeleted = false,
                            Name = "ProductType"
                        });
                });

            modelBuilder.Entity("API.Models.OrderLineModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("API.Models.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("API.Models.LookupModel", b =>
                {
                    b.HasOne("API.Models.LookupTypeModel", "Type")
                        .WithMany("Lookups")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("API.Models.OrderLineModel", b =>
                {
                    b.HasOne("API.Models.OrderModel", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.LookupModel", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("Order");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("API.Models.OrderModel", b =>
                {
                    b.HasOne("API.Models.LookupModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("API.Models.LookupModel", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("API.Models.LookupTypeModel", b =>
                {
                    b.Navigation("Lookups");
                });
#pragma warning restore 612, 618
        }
    }
}
